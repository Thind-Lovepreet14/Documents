{"ast":null,"code":"var _jsxFileName = \"/Users/lovepreetthird/Documents/ReactProjects/React_Three/comment-box/client/src/App.js\";\nimport React, { Component } from 'react';\nimport Pusher from 'pusher-js';\nimport axios from 'axios';\nimport './App.css';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      username: '',\n      newComment: '',\n      comments: []\n    };\n\n    this.updateInput = event => {\n      const _event$target = event.target,\n            name = _event$target.name,\n            value = _event$target.value;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.postComment = event => {\n      event.preventDefault();\n      const _this$state = this.state,\n            username = _this$state.username,\n            newComment = _this$state.newComment;\n      if (username.trim() === '' || newComment.trim() === '') return;\n      const data = {\n        name: username,\n        text: newComment,\n        votes: 0\n      };\n      axios.post('http://localhost:5000/comment', data).then(() => {\n        this.setState({\n          username: '',\n          newComment: ''\n        });\n      }).catch(error => console.log(error));\n    };\n\n    this.vote = (id, num) => {\n      axios.post('http://localhost:5000/vote', {\n        id,\n        vote: num\n      });\n    };\n  }\n\n  componentDidMount() {\n    const pusher = new Pusher('6f1be800f23677de029d', {\n      cluster: 'us2',\n      encrypted: true\n    });\n    axios.get('http://localhost:5000').then(({\n      data\n    }) => {\n      this.setState({\n        comments: [...data]\n      });\n    }).catch(error => console.log(error));\n    const channel = pusher.subscribe('comments');\n    channel.bind('new-comment', data => {\n      this.setState(prevState => {\n        const comments = prevState.comments;\n        comments.push(data.comment);\n        return {\n          comments\n        };\n      });\n    });\n    channel.bind('new-vote', data => {\n      let comments = this.state.comments;\n      comments = comments.map(e => {\n        if (e._id === data.doc._id) {\n          return data.doc;\n        }\n\n        return e;\n      });\n      this.setState({\n        comments\n      });\n    });\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          username = _this$state2.username,\n          newComment = _this$state2.newComment,\n          comments = _this$state2.comments;\n    const userComments = comments.map(e => React.createElement(\"article\", {\n      className: \"comment\",\n      key: e._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"comment-user\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, e.name), React.createElement(\"p\", {\n      className: \"comment-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, e.text), React.createElement(\"div\", {\n      className: \"voting\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"vote-buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"upvote\",\n      onClick: () => this.vote(e._id, 1),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Upvote\"), React.createElement(\"button\", {\n      className: \"downvote\",\n      onClick: () => this.vote(e._id, -1),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Downvote\")), React.createElement(\"div\", {\n      className: \"votes\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Votes: \", e.votes))));\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"article\", {\n      className: \"post\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Interesting Video\"), React.createElement(\"iframe\", {\n      title: \"video\",\n      width: \"560\",\n      height: \"315\",\n      src: \"https://www.youtube.com/embed/PC60fAKJiek\",\n      frameborder: \"0\",\n      allow: \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\",\n      allowfullscreen: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"Leave a comment if you enjoyed the video above\")), React.createElement(\"section\", {\n      className: \"comments-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.postComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Name:\"), React.createElement(\"input\", {\n      className: \"username\",\n      name: \"username\",\n      id: \"username\",\n      type: \"name\",\n      value: username,\n      onChange: this.updateInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"new-comment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Comment:\"), React.createElement(\"textarea\", {\n      className: \"comment\",\n      name: \"newComment\",\n      id: \"new-comment\",\n      value: newComment,\n      onChange: this.updateInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"Have your say\"))), React.createElement(\"section\", {\n      className: \"comments-section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, userComments));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/lovepreetthird/Documents/ReactProjects/React_Three/comment-box/client/src/App.js"],"names":["React","Component","Pusher","axios","App","state","username","newComment","comments","updateInput","event","target","name","value","setState","postComment","preventDefault","trim","data","text","votes","post","then","catch","error","console","log","vote","id","num","componentDidMount","pusher","cluster","encrypted","get","channel","subscribe","bind","prevState","push","comment","map","e","_id","doc","render","userComments"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Pusher from 'pusher-js';\nimport axios from 'axios';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    username: '',\n    newComment: '',\n    comments: [],\n  };\n\n  updateInput = event => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  postComment = event => {\n    event.preventDefault();\n    const { username, newComment } = this.state;\n    if (username.trim() === '' || newComment.trim() === '') return;\n\n    const data = {\n      name: username,\n      text: newComment,\n      votes: 0,\n    };\n\n    axios\n      .post('http://localhost:5000/comment', data)\n      .then(() => {\n        this.setState({\n          username: '',\n          newComment: '',\n        });\n      })\n      .catch(error => console.log(error));\n  };\n\n  vote = (id, num) => {\n    axios.post('http://localhost:5000/vote', {\n      id,\n      vote: num,\n    });\n  };\n\n  componentDidMount() {\n    const pusher = new Pusher('6f1be800f23677de029d', {\n      cluster: 'us2',\n      encrypted: true,\n    });\n\n    axios\n      .get('http://localhost:5000')\n      .then(({ data }) => {\n        this.setState({\n          comments: [...data],\n        });\n      })\n      .catch(error => console.log(error));\n\n    const channel = pusher.subscribe('comments');\n    channel.bind('new-comment', data => {\n      this.setState(prevState => {\n        const { comments } = prevState;\n        comments.push(data.comment);\n\n        return {\n          comments,\n        };\n      });\n    });\n\n    channel.bind('new-vote', data => {\n      let { comments } = this.state;\n      comments = comments.map(e => {\n        if (e._id === data.doc._id) {\n          return data.doc;\n        }\n\n        return e;\n      });\n\n      this.setState({\n        comments,\n      });\n    });\n  }\n\n  render() {\n    const { username, newComment, comments } = this.state;\n\n    const userComments = comments.map(e => (\n      <article className=\"comment\" key={e._id}>\n        <h1 className=\"comment-user\">{e.name}</h1>\n        <p className=\"comment-text\">{e.text}</p>\n        <div className=\"voting\">\n          <div className=\"vote-buttons\">\n            <button className=\"upvote\" onClick={() => this.vote(e._id, 1)}>\n              Upvote\n            </button>\n            <button className=\"downvote\" onClick={() => this.vote(e._id, -1)}>\n              Downvote\n            </button>\n          </div>\n          <div className=\"votes\">Votes: {e.votes}</div>\n        </div>\n      </article>\n    ));\n\n    return (\n      <div className=\"App\">\n        <article className=\"post\">\n          <h1>Interesting Video</h1>\n          <iframe\n            title=\"video\"\n            width=\"560\"\n            height=\"315\"\n            src=\"https://www.youtube.com/embed/PC60fAKJiek\"\n            frameborder=\"0\"\n            allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n            allowfullscreen\n          />\n          <p>Leave a comment if you enjoyed the video above</p>\n        </article>\n        <section className=\"comments-form\">\n          <form onSubmit={this.postComment}>\n            <label htmlFor=\"username\">Name:</label>\n            <input\n              className=\"username\"\n              name=\"username\"\n              id=\"username\"\n              type=\"name\"\n              value={username}\n              onChange={this.updateInput}\n            />\n\n            <label htmlFor=\"new-comment\">Comment:</label>\n            <textarea\n              className=\"comment\"\n              name=\"newComment\"\n              id=\"new-comment\"\n              value={newComment}\n              onChange={this.updateInput}\n            />\n            <button type=\"submit\">Have your say</button>\n          </form>\n        </section>\n        <section className=\"comments-section\">{userComments}</section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}